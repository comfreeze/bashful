#!/bin/bash

#
# CONFIG
###################
USAGE_TITLE="SSH Toolkit"
SSH="$( which ssh )"
SCP="$( which scp )"
SSHFS="$( which sshfs )"
UNMOUNT="$( which fusermount ) -u "
NO_KEY="-o PubKeyAuthentication=no"
ANON_HOST="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
PORT=22
_REF_FORMAT="name|alias|ip-address:port"

#
# USE REQUIRE
###################
source $( dirname -- "$0" )/lib/require.sh $*

#
# COMMANDS
###################
COMMANDS=(
  SSH
  SCP
  SSHFS
)

#
# HOSTS
###################
HOSTS=()

#
# MOUNTS
###################
MOUNTS=()

#
# LIBRARIES
###################
require array
require string

#
# CUSTOM METHODS
###################
_apply_options () {
  dump_method $*
  apply_options COMMANDS $*;
}

action_add_host () {
  dump_method $*
  echo "Coming soon.";
}

action_connect () {
  dump_method $*
  apply_option SSH "$( verboses )"
  HOST=$( filter_array HOSTS ${1} ); shift
  if [ ! -z "${HOST}" ]; then
    echo "Connecting to ${HOST}"
    OPTS=( $( explode_array ":" ${HOST} ) )
    if (( "${#OPTS[@]}" >= "2" )); then
      HOST="${OPTS[0]}"; _PORT="${OPTS[1]}";
      [ ! -z "${_PORT}" ] && prepend_option HOST "-p ${_PORT}"
    fi
    verbose 0 ${SSH} ${HOST}
    ${SSH} ${HOST}
  else
    echo "Raw connect to parameters to $*"
    verbose 0 ${SSH} $*
    ${SSH} $*
  fi
}

action_mount () {
  dump_method $*
  for TARGET in "$@"; do
    HOST=$( filter_array HOSTS ${TARGET} )
    MOUNT=$( filter_array MOUNTS ${TARGET} )
    if [ ! -z "${HOST}" ]; then
      echo "Mounting ${HOST} => ~/${TARGET}"
      OPTS=( $( explode_array ":" ${HOST} ) )
      if (( "${#OPTS[@]}" >= "2" )); then
        HOST="${OPTS[0]}"; _PORT="${OPTS[1]}";
        [ ! -z "${_PORT}" ] && prepend_option HOST "-o port=${_PORT}"
      fi
      verb 2 prepend_option HOST "-d -o sshfs_debug -o workaround=all"
      verb 1 apply_option SSHFS "-o ssh_command=\"${SSH} $( verboses )\" "
      verbose 1 ${SSHFS} ${HOST}:${MOUNT} ~/${TARGET}
      ${SSHFS} ${HOST}:${MOUNT} ~/${TARGET}
    fi
  done
}

action_unmount () {
  dump_method $*
  for TARGET in "$@"; do
    MOUNT=$( filter_array MOUNTS ${TARGET} )
    if [ ! -z "${MOUNT}" ]; then
      verbose 0 "Unmounting ~/${TARGET}"
      verbose 1 ${UNMOUNT} ~/${TARGET}
      ${UNMOUNT} ~/${TARGET}
    fi
  done
}

action_remount () {
  dump_method $*
  unmount $*
  mount $*
}

#
# PARAMETERS
###################
# Anonymity
param_anonymous ()      { _apply_options "${ANON_HOST}"; }
usage_anonymous ()      { echo "-a|--anonymous"; }
describe_anonymous ()   { echo "Support anonymous hosts, ignore host checks."; }
help_anonymous ()       { echo "More detailed help here."; }
# Identity
param_no_key ()         { _apply_options "${NO_KEY}"; }
usage_no_key ()         { echo "-n|--no-key"; }
describe_no_key ()      { echo "Disable public key based authentication methods."; }
help_no_key ()          { echo "More detailed help here."; }
# Port
param_port ()           { _PORT="$1"; }
usage_port ()           { echo "-p|--port ####"; }
describe_port ()        { echo "Specify a custom port to use for connections."; }
help_port ()            { echo "More detailed help here."; }
# Overwrite Faking
param_fake ()           { prepend_options COMMANDS "echo "; }

#
# ACTION
###################
# Define a new Host Record
usage_add_host ()       { echo "a|add|add_host ${_REF_FORMAT}"; }
describe_add_host ()    { echo "Define a new host record"; }
help_add_host ()        { cat << EOF
 "More detailed help here.";
EOF
}
# Connect to a target
usage_connect ()        { echo "c|connect ${_REF_FORMAT}"; }
describe_connect ()     { echo "Connect to a defined host"; }
help_connect ()         { cat << EOF
 "More detailed help here.";
EOF
}
# Mount a target
usage_mount ()          { echo "m|mount ${_REF_FORMAT}"; }
describe_mount ()       { echo "Mount a defined host share"; }
help_mount ()           { cat << EOF
 "More detailed help here.";
EOF
}
# Unmount a target
usage_unmount ()        { echo "u|unmount ${_REF_FORMAT}"; }
describe_unmount ()     { echo "Unount a defined host share"; }
help_unmount ()         { cat << EOF
 "More detailed help here.";
EOF
}
# Remount a target
usage_remount ()        { echo "r|remount ${_REF_FORMAT}"; }
describe_remount ()     { echo "Remount a defined host share"; }
help_remount ()         { cat << EOF
 "More detailed help here.";
EOF
}

#
# EXECUTION
###################
require help $*
run $*
